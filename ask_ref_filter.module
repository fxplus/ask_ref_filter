<?php

/**
 * Implements hook_permission().
 */
function ask_ref_filter_permission() {
  return array(
    'use reference highlighting' => array(
        'title' => t('Use reference highlighting widget'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function ask_ref_filter_menu() {
  $items['examples/ask_ref_filter'] = array(
    'title' => 'Filter Example',
    'page callback' => '_ask_ref_filter_information',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Implements hook_preprocess_node().
 */

function ask_ref_filter_node_view($node, $view_mode = 'full', $langcode = NULL) {
//function ask_ref_filter_preprocess_node(&$variables) {
  //dpm($node);
  if ($node->content['body']['#view_mode'] == 'full') {
    $path = drupal_get_path('module', 'ask_ref_filter');
    if ($node->type == 'page' && $node->book['bid'] == '74') {
      drupal_add_js($path . '/js/ref_highlight.js', array('type' => 'file', 'scope' => 'header'));
      //dpm($path.'/js/ref_highlight.js');
    }
  }
}
/**
 * Implements hook_filter_info().
 *
 * Here we define the different filters provided by the module. For this
 * example, time_filter is a very static and simple replacement, but it requires
 * some preparation of the string because of the special html tags < and >. The
 * highlight_filter is more complex, including its own settings and inline tips.
 */
function ask_ref_filter_filter_info() {
  $filters['filter_highlight'] = array(
    'title' => t('Highlight Filter'),
    'description' => t('Highlight author, date etc in references'),
    'process callback'  => '_ask_ref_filter_filter_highlight_process',
    'default settings' => array(
      'ask_ref_filter_highlight' => 'bar',
    ),
    'settings callback' => '_ask_ref_filter_filter_highlight_settings',
    'tips callback' => '_ask_ref_filter_filter_highlight_tips',
  );
  return $filters;
}

function ask_ref_filter_form_page_node_form_alter(&$form, &$form_state, $form_id) {
  if (user_access('use reference highlighting')) {
    drupal_add_js(drupal_get_path('module', 'ask_ref_filter').'/js/tag_selection.js');
  }
}

/*
 * Highlight filter
 *
 * Drupal has several text formats (they are not filters), and in our example
 * the highlight replacement can be configured for each one of them, so the module
 * includes a settings callback, with options to configure those replacements.
 * Also, a Tips callback will help showing the current replacement
 * for the content type being edited.
 */

/**
 * Settings callback for highlight filter.
 *
 * Per input format
 */
function _ask_ref_filter_filter_highlight_settings($form, $form_state, $filter, $format, $defaults) {
  $settings['ask_ref_filter_highlight'] = array(
    '#type' => 'textfield',
    '#title' => t('Substitution string'),
    '#default_value' => isset($filter->settings['ask_ref_filter_highlight']) ? $filter->settings['ask_ref_filter_highlight'] : $defaults['ask_ref_filter_highlight'],
    '#description' => t('The string to substitute for "highlight" everywhere in the text.'),
  );
  return $settings;
}

/**
 * Highlight filter process callback.
 */
function _ask_ref_filter_filter_highlight_process($text, $filter, $format) {

  // $pattern = '/\[[A-Za-z0-9\., ]* ?| ?[a-z]*\]/';
  // $pattern = '/\[.*\|.*\]/';
  // $pattern = '/\[.*?\|.*?\]/';
  $intchar = 'ÀÁÅÃÄÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ'; // \p{L} did not work
  $punct = "&!?'’,.;:\/";
  $pattern = "/\[[\w $punct$intchar]*\|[\w]*\|?[\w,. ;]*?\]/";


  
  // $count = preg_match($pattern, $text, $matches, PREG_OFFSET_CAPTURE );
  // dpm($matches);
  
  $text = preg_replace_callback(
            $pattern,
            "_ask_ref_highlights",
            $text);
  

  return $text;
  //return str_replace('highlight', $replacement, $text);
}

function _ask_ref_highlights($matches) {
  $separator = '|';
  $reference = $matches[0];
  $reference = explode($separator, str_replace(array('[',']'), '', $reference));
  array_walk($reference, '_clean_ref_components');
  //dpm($reference);
  // if there is an optional third argument, use it as a tooltip
  if (isset($reference[2])) { 
    $tip = ' title="'.$reference[2].'" data-toggle="tooltip" data-placement="top"'; 
  }
  // otherwise just use the simple class label
  else {
    $tip = ' title="'.$reference[1].'" data-toggle="tooltip" data-placement="top"'; 
  }
  return '<span class="reference-'.strtolower($reference[1]).'"'.$tip.'>'.$reference[0].'</span>';
}

function _clean_ref_components(&$item, $key) {
  $item = check_plain(trim($item));
}
/**
 * Filter tips callback for highlight filter.
 *
 */
function _ask_ref_filter_filter_highlight_tips($filter, $format, $long = FALSE) {
  if (!$long) {
    // This string will be shown in the content add/edit form.
    return t('<em>[Shakespeare:author]</em>, <em>[1948:year]</em> etc highlighted within reference');
  }
  else {
    return t('Highlighting is applied as follows: 
<ul>
<li><em>[Shakespeare:author]</em> -> red</li>, 
<li><em>[1948:year]</em> -> blue</li>
<li>...</li>
<li>...</li>
</ul>');
  }
}


/**
 * Implements hook_help().
 */
function ask_ref_filter_help($path, $arg) {
  switch ($path) {
    case 'admin/help#ask_ref_filter':
      return _ask_ref_filter_information();

  }
}

/**
 * Simply returns a little bit of information about the example.
 */
function _ask_ref_filter_information() {
  return t("<p>This module provides a markdown style filter to enable highlighting of the components of a reference (eg author, title etc.</p><p>The reasoning for this is discussed <a href=\"http://goo.gl/Tke156\">here</a></p>",
    array('!link' => l(t('admin/config/content/formats'), 'admin/config/content/formats'))
  );
}

/* PREVIEW HIGHLIGHTING */

/*
 * Implements hook_form_alter
 * 
 *  add live preview to node edit (uses https://drupal.org/project/ajax_markup)
 *  couldn't get this working
 */
// function ask_ref_filter_form_alter(&$form, &$form_state, $form_id) {
//   dpm($form_id);
//   switch ($form_id) {
//     case 'page_node_form':
//       $form['#after_build'][] = '_ask_ref_filter_after_build';
//       break;
//   }
//}

// function _ask_ref_filter_after_build($form, &$form_state) {
//   dpm('_ask_ref_filter_after_build');
//   $path = drupal_get_path('module', 'ask_ref_filter');
//   drupal_add_js($path . '/js/preview_highlights.js', array('type' => 'file', 'scope' => 'header'));
//   return $form;
// }
/* PREVIEW */